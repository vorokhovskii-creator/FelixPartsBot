import os
import logging
from datetime import datetime
from typing import Optional

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–∑ ENV
PRINTER_IP = os.getenv('PRINTER_IP', '192.168.0.50')
PRINTER_PORT = int(os.getenv('PRINTER_PORT', 9100))
PRINTER_ENABLED = os.getenv('PRINTER_ENABLED', 'false').lower() == 'true'
RECEIPT_WIDTH = int(os.getenv('RECEIPT_WIDTH', 32))  # 32 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è 58–º–º, 48 –¥–ª—è 80–º–º


def print_order_receipt(order) -> bool:
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç —á–µ–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä–µ ESC/POS.
    
    Args:
        order: –û–±—ä–µ–∫—Ç Order –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–µ—á–∞—Ç—å —É—Å–ø–µ—à–Ω–∞, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not PRINTER_ENABLED:
        logger.info("–ü–µ—á–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ (PRINTER_ENABLED=false)")
        return False
    
    try:
        from escpos.printer import Network
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É
        printer = Network(PRINTER_IP, port=PRINTER_PORT)
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É {PRINTER_IP}:{PRINTER_PORT}")
        
        # --- –ó–ê–ì–û–õ–û–í–û–ö ---
        printer.set(align='center', bold=True, double_height=True, double_width=True)
        printer.text("–°–¢–û Felix\n")
        
        printer.set(align='center', bold=False, double_height=False, double_width=False)
        printer.text("–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞\n")
        printer.text("=" * RECEIPT_WIDTH + "\n")
        
        # --- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï ---
        printer.set(align='left', bold=True)
        printer.text(f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}\n")
        
        printer.set(bold=False)
        printer.text(f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n")
        printer.text(f"–ú–µ—Ö–∞–Ω–∏–∫: {order.mechanic_name}\n")
        car_number_value = getattr(order, 'preferred_car_number', None) or getattr(order, 'car_number', None) or getattr(order, 'vin', None)
        if car_number_value:
            printer.text(f"–ù–æ–º–µ—Ä –∞–≤—Ç–æ: {car_number_value}\n")
        if getattr(order, 'vin', None) and order.vin != car_number_value:
            printer.text(f"VIN: {order.vin}\n")
        printer.text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n")
        printer.text("=" * RECEIPT_WIDTH + "\n")
        
        # --- –°–ü–ò–°–û–ö –î–ï–¢–ê–õ–ï–ô ---
        printer.set(bold=True)
        printer.text("–ó–∞–ø—á–∞—Å—Ç–∏:\n")
        printer.set(bold=False)
        
        for i, part in enumerate(order.selected_parts or [], 1):
            # –ü–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            lines = wrap_text(part, RECEIPT_WIDTH - 4)
            for j, line in enumerate(lines):
                if j == 0:
                    printer.text(f"{i}. {line}\n")
                else:
                    printer.text(f"   {line}\n")
        
        printer.text("=" * RECEIPT_WIDTH + "\n")
        
        # --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ---
        printer.text(f"–¢–∏–ø: {'‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª' if order.is_original else 'üîß –ù–µ –æ—Ä–∏–≥–∏–Ω–∞–ª'}\n")
        printer.text(f"–°—Ç–∞—Ç—É—Å: {order.status.upper()}\n")
        
        if order.photo_url:
            printer.text("üì∏ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n")
        
        printer.text("=" * RECEIPT_WIDTH + "\n")
        
        # --- –§–£–¢–ï–† ---
        printer.set(align='center')
        printer.text("\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!\n")
        printer.text("Felix Auto Service\n")
        printer.text(f"–ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
        printer.text("\n")
        
        # --- QR-–∫–æ–¥ —Å ID –∑–∞–∫–∞–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
        try:
            printer.qr(f"FELIX-ORDER-{order.id}", size=6)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å QR-–∫–æ–¥: {e}")
        
        # –û—Ç—Ä–µ–∑–∞—Ç—å —á–µ–∫
        printer.cut()
        
        logger.info(f"–ß–µ–∫ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω")
        return True
        
    except ImportError:
        logger.error("python-escpos –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-escpos")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}: {e}")
        return False


def wrap_text(text: str, width: int) -> list:
    """
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    """
    words = text.split()
    lines = []
    current_line = ""
    
    for word in words:
        if len(current_line) + len(word) + 1 <= width:
            current_line += word + " "
        else:
            lines.append(current_line.strip())
            current_line = word + " "
    
    if current_line:
        lines.append(current_line.strip())
    
    return lines if lines else [text[:width]]


def print_test_receipt() -> bool:
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞.
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–µ—á–∞—Ç—å —É—Å–ø–µ—à–Ω–∞
    """
    if not PRINTER_ENABLED:
        logger.info("–ü–µ—á–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return False
    
    try:
        from escpos.printer import Network
        
        printer = Network(PRINTER_IP, port=PRINTER_PORT)
        
        printer.set(align='center', bold=True, double_height=True)
        printer.text("–¢–ï–°–¢–û–í–ê–Ø –ü–ï–ß–ê–¢–¨\n")
        
        printer.set(align='center', bold=False, double_height=False)
        printer.text("=" * RECEIPT_WIDTH + "\n")
        printer.text("–ü—Ä–∏–Ω—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
        printer.text(f"IP: {PRINTER_IP}:{PRINTER_PORT}\n")
        printer.text(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
        printer.text("=" * RECEIPT_WIDTH + "\n\n")
        
        printer.cut()
        
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–∫ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏: {e}")
        return False


# ========== –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: PDF –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ ==========

def generate_order_pdf(order, output_path: Optional[str] = None) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-—á–µ–∫ –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ –æ–±—ã—á–Ω–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–µ.
    
    Args:
        order: –û–±—ä–µ–∫—Ç Order
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É PDF –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.lib.units import mm
        from reportlab.pdfgen import canvas
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer
        
        if not output_path:
            output_path = f"/tmp/felix_order_{order.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        c = canvas.Canvas(output_path, pagesize=A4)
        width, height = A4
        
        y = height - 50*mm
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        c.setFont("Helvetica-Bold", 20)
        c.drawCentredString(width/2, y, "–°–¢–û Felix")
        y -= 10*mm
        
        c.setFont("Helvetica", 12)
        c.drawCentredString(width/2, y, "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞")
        y -= 15*mm
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        c.setFont("Helvetica-Bold", 14)
        c.drawString(50*mm, y, f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}")
        y -= 8*mm
        
        c.setFont("Helvetica", 11)
        c.drawString(50*mm, y, f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}")
        y -= 6*mm
        c.drawString(50*mm, y, f"–ú–µ—Ö–∞–Ω–∏–∫: {order.mechanic_name}")
        y -= 6*mm
        car_number_value = getattr(order, 'preferred_car_number', None) or getattr(order, 'car_number', None) or getattr(order, 'vin', None)
        if car_number_value:
            c.drawString(50*mm, y, f"–ù–æ–º–µ—Ä –∞–≤—Ç–æ: {car_number_value}")
            y -= 6*mm
        if getattr(order, 'vin', None) and order.vin != car_number_value:
            c.drawString(50*mm, y, f"VIN: {order.vin}")
            y -= 6*mm
        c.drawString(50*mm, y, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}")
        y -= 10*mm
        
        # –õ–∏–Ω–∏—è
        c.line(50*mm, y, width-50*mm, y)
        y -= 8*mm
        
        # –°–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50*mm, y, "–ó–∞–ø—á–∞—Å—Ç–∏:")
        y -= 8*mm
        
        c.setFont("Helvetica", 11)
        for i, part in enumerate(order.selected_parts or [], 1):
            c.drawString(50*mm, y, f"{i}. {part}")
            y -= 6*mm
        
        y -= 5*mm
        c.line(50*mm, y, width-50*mm, y)
        y -= 8*mm
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        c.drawString(50*mm, y, f"–¢–∏–ø: {'–û—Ä–∏–≥–∏–Ω–∞–ª' if order.is_original else '–ù–µ –æ—Ä–∏–≥–∏–Ω–∞–ª'}")
        y -= 6*mm
        c.drawString(50*mm, y, f"–°—Ç–∞—Ç—É—Å: {order.status.upper()}")
        y -= 15*mm
        
        # –§—É—Ç–µ—Ä
        c.setFont("Helvetica", 10)
        c.drawCentredString(width/2, y, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!")
        y -= 5*mm
        c.drawCentredString(width/2, y, "Felix Auto Service")
        
        c.save()
        
        logger.info(f"PDF-—á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} —Å–æ–∑–¥–∞–Ω: {output_path}")
        return output_path
        
    except ImportError:
        logger.error("reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install reportlab")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}: {e}")
        return None


def print_order_with_fallback(order) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä–µ, –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ—Ç PDF.
    
    Args:
        order: –û–±—ä–µ–∫—Ç Order
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä
    if print_order_receipt(order):
        return True
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º PDF
    logger.warning(f"–¢–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞—é PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}")
    pdf_path = generate_order_pdf(order)
    
    if pdf_path:
        logger.info(f"PDF —Å–æ–∑–¥–∞–Ω, –º–æ–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –≤—Ä—É—á–Ω—É—é: {pdf_path}")
        return True
    
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order.id} –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
    return False
