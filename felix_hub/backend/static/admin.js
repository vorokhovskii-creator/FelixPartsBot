// API –±–∞–∑–æ–≤—ã–π URL
const API_URL = '/api/orders';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const response = await fetch('/api/orders/stats');
        const stats = await response.json();
        
        document.getElementById('stat-total').textContent = stats.total;
        document.getElementById('stat-today').textContent = stats.today;
        document.getElementById('stat-working').textContent = stats.by_status['–≤ —Ä–∞–±–æ—Ç–µ'] || 0;
        document.getElementById('stat-ready').textContent = stats.by_status['–≥–æ—Ç–æ–≤'] || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
async function loadOrders() {
    const status = document.getElementById('filter-status').value;
    const mechanic = document.getElementById('filter-mechanic').value;
    const search = document.getElementById('search').value;
    
    let url = API_URL + '?';
    if (status) url += `status=${status}&`;
    if (mechanic) url += `mechanic=${mechanic}&`;
    
    try {
        const response = await fetch(url);
        const orders = await response.json();
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        const filtered = search 
            ? orders.filter(o => 
                o.vin.toLowerCase().includes(search.toLowerCase()) || 
                o.id.toString().includes(search)
              )
            : orders;
        
        renderOrders(filtered);
        loadStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        document.getElementById('orders-table').innerHTML = 
            '<tr><td colspan="9" class="text-center text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
function renderOrders(orders) {
    const tbody = document.getElementById('orders-table');
    
    if (orders.length === 0) {
        tbody.innerHTML = '<tr><td colspan="9" class="text-center">–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</td></tr>';
        return;
    }
    
    tbody.innerHTML = orders.map(order => `
        <tr>
            <td><strong>#${order.id}</strong></td>
            <td>${new Date(order.created_at).toLocaleString('ru-RU')}</td>
            <td>${order.mechanic_name}</td>
            <td>${order.category}</td>
            <td><code>${order.vin}</code></td>
            <td>
                <button class="btn btn-sm btn-link" onclick="showOrderDetails(${order.id})">
                    ${order.selected_parts.length} —à—Ç.
                </button>
            </td>
            <td>${order.is_original ? '‚ú® –î–∞' : 'üîß –ù–µ—Ç'}</td>
            <td>
                <select class="form-select form-select-sm status-select" 
                        onchange="updateStatus(${order.id}, this.value)"
                        data-current="${order.status}">
                    <option value="–Ω–æ–≤—ã–π" ${order.status === '–Ω–æ–≤—ã–π' ? 'selected' : ''}>üÜï –ù–æ–≤—ã–π</option>
                    <option value="–≤ —Ä–∞–±–æ—Ç–µ" ${order.status === '–≤ —Ä–∞–±–æ—Ç–µ' ? 'selected' : ''}>‚è≥ –í —Ä–∞–±–æ—Ç–µ</option>
                    <option value="–≥–æ—Ç–æ–≤" ${order.status === '–≥–æ—Ç–æ–≤' ? 'selected' : ''}>‚úÖ –ì–æ—Ç–æ–≤</option>
                    <option value="–≤—ã–¥–∞–Ω" ${order.status === '–≤—ã–¥–∞–Ω' ? 'selected' : ''}>üì¶ –í—ã–¥–∞–Ω</option>
                </select>
            </td>
            <td>
                <button class="btn btn-sm btn-primary" onclick="printOrder(${order.id})" title="–ü–µ—á–∞—Ç—å">
                    üñ®Ô∏è
                </button>
                <button class="btn btn-sm btn-danger" onclick="deleteOrder(${order.id})" title="–£–¥–∞–ª–∏—Ç—å">
                    üóëÔ∏è
                </button>
            </td>
        </tr>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function updateStatus(orderId, newStatus) {
    try {
        const response = await fetch(`${API_URL}/${orderId}`, {
            method: 'PATCH',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ status: newStatus })
        });
        
        if (response.ok) {
            showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${newStatus}"`, 'success');
            loadOrders();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'danger');
        loadOrders();
    }
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
async function showOrderDetails(orderId) {
    try {
        const response = await fetch(`${API_URL}/${orderId}`);
        const order = await response.json();
        
        const parts = order.selected_parts.map(p => `<li>${p}</li>`).join('');
        const photo = order.photo_url 
            ? `<img src="${order.photo_url}" class="img-fluid mt-2" alt="–§–æ—Ç–æ –¥–µ—Ç–∞–ª–∏">`
            : '<p class="text-muted">–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</p>';
        
        document.getElementById('order-details').innerHTML = `
            <dl class="row">
                <dt class="col-sm-3">ID –∑–∞–∫–∞–∑–∞:</dt>
                <dd class="col-sm-9">#${order.id}</dd>
                
                <dt class="col-sm-3">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</dt>
                <dd class="col-sm-9">${new Date(order.created_at).toLocaleString('ru-RU')}</dd>
                
                <dt class="col-sm-3">–ú–µ—Ö–∞–Ω–∏–∫:</dt>
                <dd class="col-sm-9">${order.mechanic_name}</dd>
                
                <dt class="col-sm-3">Telegram ID:</dt>
                <dd class="col-sm-9"><code>${order.telegram_id}</code></dd>
                
                <dt class="col-sm-3">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</dt>
                <dd class="col-sm-9">${order.category}</dd>
                
                <dt class="col-sm-3">VIN:</dt>
                <dd class="col-sm-9"><code>${order.vin}</code></dd>
                
                <dt class="col-sm-3">–î–µ—Ç–∞–ª–∏:</dt>
                <dd class="col-sm-9"><ul>${parts}</ul></dd>
                
                <dt class="col-sm-3">–¢–∏–ø:</dt>
                <dd class="col-sm-9">${order.is_original ? '‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª' : 'üîß –ù–µ –æ—Ä–∏–≥–∏–Ω–∞–ª'}</dd>
                
                <dt class="col-sm-3">–°—Ç–∞—Ç—É—Å:</dt>
                <dd class="col-sm-9"><span class="badge bg-primary">${order.status}</span></dd>
                
                <dt class="col-sm-3">–ù–∞–ø–µ—á–∞—Ç–∞–Ω:</dt>
                <dd class="col-sm-9">${order.printed ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</dd>
                
                <dt class="col-sm-3">–§–æ—Ç–æ:</dt>
                <dd class="col-sm-9">${photo}</dd>
            </dl>
        `;
        
        new bootstrap.Modal(document.getElementById('orderModal')).show();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞', 'danger');
    }
}

// –ü–µ—á–∞—Ç—å —á–µ–∫–∞
async function printOrder(orderId) {
    if (!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—á–∞—Ç—å?')) return;
    
    try {
        const response = await fetch(`${API_URL}/${orderId}/print`, { method: 'POST' });
        if (response.ok) {
            showNotification(`–ó–∞–∫–∞–∑ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å`, 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏', 'danger');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function deleteOrder(orderId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
    
    try {
        const response = await fetch(`${API_URL}/${orderId}`, { method: 'DELETE' });
        if (response.ok) {
            showNotification(`–ó–∞–∫–∞–∑ #${orderId} —É–¥–∞–ª—ë–Ω`, 'success');
            loadOrders();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'danger');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
function exportOrders() {
    const days = prompt('–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã?', '30');
    if (days) {
        window.location.href = `/export?days=${days}`;
    }
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
function resetFilters() {
    document.getElementById('filter-status').value = '';
    document.getElementById('filter-mechanic').value = '';
    document.getElementById('search').value = '';
    loadOrders();
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å toast –∏–ª–∏ alert
    alert(message);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', () => {
    loadOrders();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(loadOrders, 30000);
});
