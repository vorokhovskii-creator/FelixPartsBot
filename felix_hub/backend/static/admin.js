// API –±–∞–∑–æ–≤—ã–π URL
const API_URL = '/api/orders';
const MECHANICS_API_URL = '/api/admin/mechanics';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let mechanics = [];
let currentSection = 'orders';

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏—è–º–∏
function showSection(section) {
    currentSection = section;
    document.getElementById('mechanics-section').style.display = section === 'mechanics' ? 'block' : 'none';
    document.getElementById('orders-section').style.display = section === 'orders' ? 'block' : 'none';
    
    if (section === 'mechanics') {
        loadMechanics();
    } else if (section === 'orders') {
        loadOrders();
    }
}

function refreshCurrentSection() {
    if (currentSection === 'mechanics') {
        loadMechanics();
    } else {
        loadOrders();
    }
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏ ===

async function loadMechanics() {
    try {
        const response = await fetch(MECHANICS_API_URL);
        mechanics = await response.json();
        renderMechanics();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–æ–≤:', error);
        document.getElementById('mechanics-list').innerHTML = 
            '<div class="col"><div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–æ–≤</div></div>';
    }
}

function renderMechanics() {
    const container = document.getElementById('mechanics-list');
    
    if (mechanics.length === 0) {
        container.innerHTML = '<div class="col"><div class="alert alert-info">–ú–µ—Ö–∞–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫–∞.</div></div>';
        return;
    }
    
    container.innerHTML = mechanics.map(m => `
        <div class="col">
            <div class="card mechanic-card ${m.active ? '' : 'mechanic-inactive'}">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h5 class="card-title mb-0">${m.name}</h5>
                        <span class="badge ${m.active ? 'bg-success' : 'bg-secondary'}">
                            ${m.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                        </span>
                    </div>
                    <div class="mechanic-info mb-3">
                        <p class="mb-1"><small><strong>Email:</strong> ${m.email}</small></p>
                        <p class="mb-1"><small><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${m.phone || '-'}</small></p>
                        <p class="mb-1"><small><strong>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong> ${m.specialty || '-'}</small></p>
                    </div>
                    <div class="mechanic-stats mb-3" id="mechanic-stats-${m.id}">
                        <div class="text-center">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                            </div>
                        </div>
                    </div>
                    <div class="d-grid gap-2">
                        <button onclick="editMechanic(${m.id})" class="btn btn-sm btn-outline-primary">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button onclick="toggleMechanicActive(${m.id})" class="btn btn-sm ${m.active ? 'btn-outline-secondary' : 'btn-outline-success'}">
                            ${m.active ? 'üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
    
    mechanics.forEach(m => loadMechanicStats(m.id));
}

async function loadMechanicStats(mechanicId) {
    try {
        const response = await fetch(`${MECHANICS_API_URL}/${mechanicId}/stats`);
        const stats = await response.json();
        
        document.getElementById(`mechanic-stats-${mechanicId}`).innerHTML = `
            <div class="row g-2 text-center">
                <div class="col-6">
                    <div class="stat-box">
                        <div class="stat-value">${stats.active_orders}</div>
                        <div class="stat-label">–í —Ä–∞–±–æ—Ç–µ</div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="stat-box">
                        <div class="stat-value">${stats.total_completed}</div>
                        <div class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="stat-box">
                        <div class="stat-value">${Math.round(stats.total_time_minutes / 60)}—á</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="stat-box">
                        <div class="stat-value">${stats.avg_time_per_order}–º</div>
                        <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
                    </div>
                </div>
            </div>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∞:', error);
        document.getElementById(`mechanic-stats-${mechanicId}`).innerHTML = 
            '<small class="text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</small>';
    }
}

function openMechanicModal(mechanicId = null) {
    const modal = new bootstrap.Modal(document.getElementById('mechanicModal'));
    const form = document.getElementById('mechanic-form');
    form.reset();
    
    if (mechanicId) {
        const mechanic = mechanics.find(m => m.id === mechanicId);
        if (mechanic) {
            document.getElementById('mechanicModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞';
            document.getElementById('mechanic-id').value = mechanic.id;
            document.getElementById('mechanic-name').value = mechanic.name;
            document.getElementById('mechanic-email').value = mechanic.email;
            document.getElementById('mechanic-phone').value = mechanic.phone || '';
            document.getElementById('mechanic-specialty').value = mechanic.specialty || '';
            document.getElementById('mechanic-password').required = false;
            document.getElementById('password-required-label').style.display = 'none';
        }
    } else {
        document.getElementById('mechanicModalTitle').textContent = '–ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∫';
        document.getElementById('mechanic-id').value = '';
        document.getElementById('mechanic-password').required = true;
        document.getElementById('password-required-label').style.display = 'inline';
    }
    
    modal.show();
}

function editMechanic(mechanicId) {
    openMechanicModal(mechanicId);
}

async function saveMechanic() {
    const form = document.getElementById('mechanic-form');
    
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }
    
    const mechanicId = document.getElementById('mechanic-id').value;
    const data = {
        name: document.getElementById('mechanic-name').value,
        email: document.getElementById('mechanic-email').value,
        phone: document.getElementById('mechanic-phone').value,
        specialty: document.getElementById('mechanic-specialty').value
    };
    
    const password = document.getElementById('mechanic-password').value;
    if (password) {
        if (password.length < 6) {
            alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }
        data.password = password;
    } else if (!mechanicId) {
        alert('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫–∞');
        return;
    }
    
    try {
        const url = mechanicId ? `${MECHANICS_API_URL}/${mechanicId}` : MECHANICS_API_URL;
        const method = mechanicId ? 'PATCH' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        
        if (response.ok) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('mechanicModal'));
            modal.hide();
            loadMechanics();
            showNotification(mechanicId ? '–ú–µ—Ö–∞–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω' : '–ú–µ—Ö–∞–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω', 'success');
        } else {
            const error = await response.json();
            alert(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–∞');
    }
}

async function toggleMechanicActive(mechanicId) {
    const mechanic = mechanics.find(m => m.id === mechanicId);
    const action = mechanic.active ? '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${action} –º–µ—Ö–∞–Ω–∏–∫–∞ ${mechanic.name}?`)) {
        return;
    }
    
    try {
        const response = await fetch(`${MECHANICS_API_URL}/${mechanicId}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ active: !mechanic.active })
        });
        
        if (response.ok) {
            loadMechanics();
            showNotification(`–ú–µ—Ö–∞–Ω–∏–∫ ${mechanic.active ? '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`, 'success');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–∞');
    }
}

// === –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ ===

async function assignOrderModal(orderId) {
    if (mechanics.length === 0) {
        await loadMechanics();
    }
    
    const order = await getOrderById(orderId);
    if (!order) {
        alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    document.getElementById('assign-order-id').value = orderId;
    
    const select = document.getElementById('assign-mechanic-select');
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∞...</option>' + 
        mechanics.filter(m => m.active).map(m => `
            <option value="${m.id}" ${order.assigned_mechanic_id === m.id ? 'selected' : ''}>
                ${m.name}${m.specialty ? ' - ' + m.specialty : ''}
            </option>
        `).join('');
    
    document.getElementById('assign-notes').value = '';
    
    const modal = new bootstrap.Modal(document.getElementById('assignModal'));
    modal.show();
}

async function getOrderById(orderId) {
    try {
        const response = await fetch(`${API_URL}/${orderId}`);
        if (response.ok) {
            return await response.json();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
    return null;
}

async function confirmAssignOrder() {
    const orderId = document.getElementById('assign-order-id').value;
    const mechanicId = document.getElementById('assign-mechanic-select').value;
    const notes = document.getElementById('assign-notes').value;
    
    if (!mechanicId) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∞');
        return;
    }
    
    try {
        const order = await getOrderById(orderId);
        const isReassign = order && order.assigned_mechanic_id;
        
        const endpoint = isReassign ? 
            `${API_URL}/${orderId}/reassign` : 
            `${API_URL}/${orderId}/assign`;
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                mechanic_id: parseInt(mechanicId), 
                notes: notes 
            })
        });
        
        if (response.ok) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('assignModal'));
            modal.hide();
            loadOrders();
            showNotification(isReassign ? '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω' : '–ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω', 'success');
        } else {
            const error = await response.json();
            alert(error.error || '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        alert('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const response = await fetch('/api/orders/stats');
        const stats = await response.json();
        
        document.getElementById('stat-total').textContent = stats.total;
        document.getElementById('stat-today').textContent = stats.today;
        document.getElementById('stat-working').textContent = stats.by_status['–≤ —Ä–∞–±–æ—Ç–µ'] || 0;
        document.getElementById('stat-ready').textContent = stats.by_status['–≥–æ—Ç–æ–≤'] || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
async function loadOrders() {
    const status = document.getElementById('filter-status').value;
    const mechanic = document.getElementById('filter-mechanic').value;
    const search = document.getElementById('search').value;
    
    let url = API_URL + '?';
    if (status) url += `status=${status}&`;
    if (mechanic) url += `mechanic=${mechanic}&`;
    
    try {
        const response = await fetch(url);
        const orders = await response.json();
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        const filtered = search 
            ? orders.filter(o => 
                o.vin.toLowerCase().includes(search.toLowerCase()) || 
                o.id.toString().includes(search)
              )
            : orders;
        
        renderOrders(filtered);
        loadStats();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        document.getElementById('orders-table').innerHTML = 
            '<tr><td colspan="9" class="text-center text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
function renderOrders(orders) {
    const tbody = document.getElementById('orders-table');
    
    if (orders.length === 0) {
        tbody.innerHTML = '<tr><td colspan="9" class="text-center">–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</td></tr>';
        return;
    }
    
    tbody.innerHTML = orders.map(order => `
        <tr>
            <td><strong>#${order.id}</strong></td>
            <td>${new Date(order.created_at).toLocaleString('ru-RU')}</td>
            <td>${order.mechanic_name}</td>
            <td>${order.category}</td>
            <td><code>${order.vin}</code></td>
            <td>
                <button class="btn btn-sm btn-link" onclick="showOrderDetails(${order.id})">
                    ${order.selected_parts.length} —à—Ç.
                </button>
            </td>
            <td>${order.is_original ? '‚ú® –î–∞' : 'üîß –ù–µ—Ç'}</td>
            <td>
                <select class="form-select form-select-sm status-select" 
                        onchange="updateStatus(${order.id}, this.value)"
                        data-current="${order.status}">
                    <option value="–Ω–æ–≤—ã–π" ${order.status === '–Ω–æ–≤—ã–π' ? 'selected' : ''}>üÜï –ù–æ–≤—ã–π</option>
                    <option value="–≤ —Ä–∞–±–æ—Ç–µ" ${order.status === '–≤ —Ä–∞–±–æ—Ç–µ' ? 'selected' : ''}>‚è≥ –í —Ä–∞–±–æ—Ç–µ</option>
                    <option value="–≥–æ—Ç–æ–≤" ${order.status === '–≥–æ—Ç–æ–≤' ? 'selected' : ''}>‚úÖ –ì–æ—Ç–æ–≤</option>
                    <option value="–≤—ã–¥–∞–Ω" ${order.status === '–≤—ã–¥–∞–Ω' ? 'selected' : ''}>üì¶ –í—ã–¥–∞–Ω</option>
                </select>
            </td>
            <td>
                <div class="btn-group" role="group">
                    <button class="btn btn-sm btn-info" onclick="assignOrderModal(${order.id})" title="${order.assigned_mechanic_id ? '–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å' : '–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞'}">
                        ${order.assigned_mechanic_id ? 'üë®‚Äçüîß' : '‚ûïüë®‚Äçüîß'}
                    </button>
                    <button class="btn btn-sm btn-primary" onclick="printOrder(${order.id})" title="–ü–µ—á–∞—Ç—å">
                        üñ®Ô∏è
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteOrder(${order.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        üóëÔ∏è
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function updateStatus(orderId, newStatus) {
    try {
        const response = await fetch(`${API_URL}/${orderId}`, {
            method: 'PATCH',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ status: newStatus })
        });
        
        if (response.ok) {
            showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${newStatus}"`, 'success');
            loadOrders();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'danger');
        loadOrders();
    }
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
async function showOrderDetails(orderId) {
    try {
        const response = await fetch(`${API_URL}/${orderId}`);
        const order = await response.json();
        
        const parts = order.selected_parts.map(p => `<li>${p}</li>`).join('');
        const photo = order.photo_url 
            ? `<img src="${order.photo_url}" class="img-fluid mt-2" alt="–§–æ—Ç–æ –¥–µ—Ç–∞–ª–∏">`
            : '<p class="text-muted">–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</p>';
        
        const assignedMechanic = order.assigned_mechanic_id 
            ? mechanics.find(m => m.id === order.assigned_mechanic_id) 
            : null;
        
        document.getElementById('order-details').innerHTML = `
            <dl class="row">
                <dt class="col-sm-3">ID –∑–∞–∫–∞–∑–∞:</dt>
                <dd class="col-sm-9">#${order.id}</dd>
                
                <dt class="col-sm-3">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</dt>
                <dd class="col-sm-9">${new Date(order.created_at).toLocaleString('ru-RU')}</dd>
                
                <dt class="col-sm-3">–ú–µ—Ö–∞–Ω–∏–∫ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å):</dt>
                <dd class="col-sm-9">${order.mechanic_name}</dd>
                
                <dt class="col-sm-3">–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞:</dt>
                <dd class="col-sm-9">${assignedMechanic ? `${assignedMechanic.name} (${assignedMechanic.specialty || '–Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'})` : '<span class="text-muted">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</span>'}</dd>
                
                <dt class="col-sm-3">Telegram ID:</dt>
                <dd class="col-sm-9"><code>${order.telegram_id}</code></dd>
                
                <dt class="col-sm-3">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</dt>
                <dd class="col-sm-9">${order.category}</dd>
                
                <dt class="col-sm-3">VIN:</dt>
                <dd class="col-sm-9"><code>${order.vin}</code></dd>
                
                <dt class="col-sm-3">–î–µ—Ç–∞–ª–∏:</dt>
                <dd class="col-sm-9"><ul>${parts}</ul></dd>
                
                <dt class="col-sm-3">–¢–∏–ø:</dt>
                <dd class="col-sm-9">${order.is_original ? '‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª' : 'üîß –ù–µ –æ—Ä–∏–≥–∏–Ω–∞–ª'}</dd>
                
                <dt class="col-sm-3">–°—Ç–∞—Ç—É—Å:</dt>
                <dd class="col-sm-9"><span class="badge bg-primary">${order.status}</span></dd>
                
                <dt class="col-sm-3">–ù–∞–ø–µ—á–∞—Ç–∞–Ω:</dt>
                <dd class="col-sm-9">${order.printed ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</dd>
                
                <dt class="col-sm-3">–§–æ—Ç–æ:</dt>
                <dd class="col-sm-9">${photo}</dd>
            </dl>
        `;
        
        new bootstrap.Modal(document.getElementById('orderModal')).show();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞', 'danger');
    }
}

// –ü–µ—á–∞—Ç—å —á–µ–∫–∞
async function printOrder(orderId) {
    if (!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—á–∞—Ç—å?')) return;
    
    try {
        const response = await fetch(`${API_URL}/${orderId}/print`, { method: 'POST' });
        if (response.ok) {
            showNotification(`–ó–∞–∫–∞–∑ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å`, 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏', 'danger');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function deleteOrder(orderId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
    
    try {
        const response = await fetch(`${API_URL}/${orderId}`, { method: 'DELETE' });
        if (response.ok) {
            showNotification(`–ó–∞–∫–∞–∑ #${orderId} —É–¥–∞–ª—ë–Ω`, 'success');
            loadOrders();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'danger');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
function exportOrders() {
    const days = prompt('–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã?', '30');
    if (days) {
        window.location.href = `/export?days=${days}`;
    }
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
function resetFilters() {
    document.getElementById('filter-status').value = '';
    document.getElementById('filter-mechanic').value = '';
    document.getElementById('search').value = '';
    loadOrders();
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å toast –∏–ª–∏ alert
    alert(message);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', () => {
    loadMechanics();
    loadOrders();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        if (currentSection === 'orders') {
            loadOrders();
        }
    }, 30000);
});
