"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ø–µ—á–∞—Ç–∏ —á–µ–∫–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏
"""

import os
import sys
import tempfile
from datetime import datetime

# Add the backend directory to the path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Mock order for testing
class MockOrder:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.id = 12345
        self.mechanic_name = "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤"
        self.telegram_id = "987654321"
        self.vin = "WVWZZZ1KZBW654321"
        self.category = "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"
        self.selected_parts = [
            "–ú–∞—Å–ª–æ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω–æ–µ Castrol 75W-90",
            "–§–∏–ª—å—Ç—Ä –ê–ö–ü–ü –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å –ø—Ä–æ–∫–ª–∞–¥–∫–æ–π",
            "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –ø–æ–¥–¥–æ–Ω–∞ –ê–ö–ü–ü —É—Å–∏–ª–µ–Ω–Ω–∞—è"
        ]
        self.is_original = True
        self.status = "–≥–æ—Ç–æ–≤"
        self.photo_url = "https://example.com/car_photo.jpg"
        self.created_at = datetime.now()
        self.printed = False


def test_wrap_text():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞"""
    from utils.printer import wrap_text
    
    print("\n=== –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ ===")
    
    # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    short_text = "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç"
    result = wrap_text(short_text, 30)
    print(f"–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç: {result}")
    assert len(result) == 1
    
    # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    long_text = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"
    result = wrap_text(long_text, 30)
    print(f"–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(result)} —Å—Ç—Ä–æ–∫):")
    for i, line in enumerate(result, 1):
        print(f"  {i}. {line}")
    assert len(result) > 1
    
    print("‚úì –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω")


def test_pdf_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"""
    from utils.printer import generate_order_pdf
    
    print("\n=== –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF ===")
    
    order = MockOrder()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        pdf_path = generate_order_pdf(order, tmp_path)
        
        if pdf_path:
            print(f"‚úì PDF —Å–æ–∑–¥–∞–Ω: {pdf_path}")
            print(f"‚úì –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(pdf_path)} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            assert os.path.exists(pdf_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
            assert os.path.getsize(pdf_path) > 0
            
            print("‚úì –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print("‚ö† PDF –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(tmp_path):
            os.remove(tmp_path)


def test_printer_disabled():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º"""
    from utils.printer import print_order_receipt
    
    print("\n=== –¢–µ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º ===")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä
    old_value = os.environ.get('PRINTER_ENABLED')
    os.environ['PRINTER_ENABLED'] = 'false'
    
    try:
        order = MockOrder()
        result = print_order_receipt(order)
        
        assert result is False
        print("‚úì –ü—Ä–∏–Ω—Ç–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
        print("‚úì –¢–µ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º –ø—Ä–æ–π–¥–µ–Ω")
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if old_value is not None:
            os.environ['PRINTER_ENABLED'] = old_value
        else:
            os.environ.pop('PRINTER_ENABLED', None)


def test_fallback_mechanism():
    """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ fallback"""
    from utils.printer import print_order_with_fallback
    
    print("\n=== –¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ fallback ===")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª fallback
    old_value = os.environ.get('PRINTER_ENABLED')
    os.environ['PRINTER_ENABLED'] = 'false'
    
    try:
        order = MockOrder()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å (–¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å fallback –Ω–∞ PDF)
        result = print_order_with_fallback(order)
        
        if result:
            print("‚úì Fallback –Ω–∞ PDF —Å—Ä–∞–±–æ—Ç–∞–ª")
            print("‚úì –¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ fallback –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print("‚ö† Fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ, reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if old_value is not None:
            os.environ['PRINTER_ENABLED'] = old_value
        else:
            os.environ.pop('PRINTER_ENABLED', None)


def test_receipt_format():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —á–µ–∫–∞"""
    from utils.printer import wrap_text
    
    print("\n=== –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —á–µ–∫–∞ ===")
    
    order = MockOrder()
    receipt_width = 32
    
    print("\n–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–∞:")
    print("=" * receipt_width)
    print("        –°–¢–û Felix".center(receipt_width))
    print("–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞".center(receipt_width))
    print("=" * receipt_width)
    print(f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}")
    print(f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}")
    print(f"–ú–µ—Ö–∞–Ω–∏–∫: {order.mechanic_name}")
    print(f"VIN: {order.vin}")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}")
    print("=" * receipt_width)
    print("–ó–∞–ø—á–∞—Å—Ç–∏:")
    
    for i, part in enumerate(order.selected_parts, 1):
        lines = wrap_text(part, receipt_width - 4)
        for j, line in enumerate(lines):
            if j == 0:
                print(f"{i}. {line}")
            else:
                print(f"   {line}")
    
    print("=" * receipt_width)
    print(f"–¢–∏–ø: {'‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª' if order.is_original else 'üîß –ù–µ –æ—Ä–∏–≥–∏–Ω–∞–ª'}")
    print(f"–°—Ç–∞—Ç—É—Å: {order.status.upper()}")
    
    if order.photo_url:
        print("üì∏ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ")
    
    print("=" * receipt_width)
    print("\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!".center(receipt_width))
    print("Felix Auto Service".center(receipt_width))
    print(f"–ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}".center(receipt_width))
    print("\n[QR: FELIX-ORDER-{}]".format(order.id).center(receipt_width))
    print("=" * receipt_width)
    
    print("\n‚úì –§–æ—Ä–º–∞—Ç —á–µ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("  –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ú–û–î–£–õ–Ø –ü–ï–ß–ê–¢–ò –ß–ï–ö–û–í")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_wrap_text()
        test_pdf_generation()
        test_printer_disabled()
        test_fallback_mechanism()
        test_receipt_format()
        
        print("\n" + "=" * 60)
        print("  ‚úì –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        print("=" * 60)
        
    except AssertionError as e:
        print(f"\n‚úó –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
