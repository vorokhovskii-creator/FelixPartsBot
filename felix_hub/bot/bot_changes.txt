# This file contains the necessary bot changes to add to bot.py

# 1. In the start() function, add deeplink handling after line 111:
    # Check for deeplink payload (e.g., /start order_123)
    if context.args and len(context.args) > 0:
        payload = context.args[0]
        if payload.startswith('order_'):
            try:
                order_id = int(payload.replace('order_', ''))
                await handle_deeplink(update, context, order_id)
                return
            except ValueError:
                logger.warning(f"Invalid order deeplink payload: {payload}")

# 2. Add these two new functions before error_handler (around line 663):

async def handle_deeplink(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å deeplink –Ω–∞ –∑–∞–∫–∞–∑"""
    lang = context.user_data.get('language', 'ru')
    telegram_id = str(update.effective_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ—Ö–∞–Ω–∏–∫–æ–º
        response = requests.get(
            f"{BACKEND_URL}/api/admin/mechanics",
            timeout=10
        )
        
        if response.status_code == 200:
            mechanics = response.json()
            mechanic = next((m for m in mechanics if m.get('telegram_id') == telegram_id), None)
            
            if not mechanic:
                await update.message.reply_text(get_text('not_a_mechanic', lang))
                return
            
            # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑
            order_response = requests.get(
                f"{BACKEND_URL}/api/orders/{order_id}",
                timeout=10
            )
            
            if order_response.status_code == 200:
                order = order_response.json()
                
                # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                parts_list = "\n".join([f"  ‚Ä¢ {part}" for part in order['selected_parts']])
                
                message = (
                    f"üîó <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n\n"
                    f"üöó <b>VIN:</b> {order['vin']}\n"
                    f"üì¶ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {order['category']}\n"
                    f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> {order['status']}\n\n"
                    f"<b>–ó–∞–ø—á–∞—Å—Ç–∏:</b>\n{parts_list}\n\n"
                    f"üîó –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–æ–º"
                )
                
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"Error handling deeplink: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏")


async def myorders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /myorders - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –º–µ—Ö–∞–Ω–∏–∫–∞"""
    lang = context.user_data.get('language', 'ru')
    telegram_id = str(update.effective_user.id)
    
    try:
        # –ù–∞–π—Ç–∏ –º–µ—Ö–∞–Ω–∏–∫–∞ –ø–æ telegram_id
        response = requests.get(
            f"{BACKEND_URL}/api/admin/mechanics",
            timeout=10
        )
        
        if response.status_code != 200:
            await update.message.reply_text(get_text('orders_load_error', lang))
            return
        
        mechanics = response.json()
        mechanic = next((m for m in mechanics if m.get('telegram_id') == telegram_id), None)
        
        if not mechanic:
            await update.message.reply_text(get_text('not_a_mechanic', lang))
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –º–µ—Ö–∞–Ω–∏–∫–∞
        orders_response = requests.get(
            f"{BACKEND_URL}/api/orders",
            params={"assigned_mechanic_id": mechanic['id']},
            timeout=10
        )
        
        if orders_response.status_code != 200:
            await update.message.reply_text(get_text('orders_load_error', lang))
            return
        
        orders = orders_response.json()
        
        if not orders:
            await update.message.reply_text(get_text('no_assigned_orders', lang))
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å deeplinks
        text = get_text('my_assigned_orders', lang)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è deeplink
        import jwt
        import time
        import os
        
        secret_key = os.getenv('SECRET_KEY', 'dev-secret-key')
        payload = {
            'mechanic_id': mechanic['id'],
            'telegram_id': telegram_id,
            'exp': int(time.time()) + 86400  # 24 hours
        }
        mechanic_token = jwt.encode(payload, secret_key, algorithm='HS256')
        
        frontend_url = os.getenv('FRONTEND_URL', 'https://felix-hub.example.com')
        
        for order in orders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å 10 –∑–∞–∫–∞–∑–∞–º–∏
            status_emoji = {
                '–Ω–æ–≤—ã–π': 'üÜï',
                '–Ω–∞–∑–Ω–∞—á–µ–Ω': 'üìå',
                '–≤ —Ä–∞–±–æ—Ç–µ': '‚è≥',
                '–∑–∞–≤–µ—Ä—à–µ–Ω': '‚úÖ',
                '–Ω–∞ –ø–∞—É–∑–µ': '‚è∏Ô∏è'
            }
            
            emoji = status_emoji.get(order.get('work_status', order.get('status')), '‚ùì')
            deeplink = f"{frontend_url}/mechanic/orders/{order['id']}?token={mechanic_token}"
            
            text += get_text('assigned_order_item', lang,
                emoji=emoji,
                order_id=order['id'],
                vin=order['vin'],
                status=order.get('work_status', order.get('status')),
                date=order.get('created_at', '')[:10],
                deeplink=deeplink
            )
        
        if len(orders) > 10:
            text += f"\n... –∏ –µ—â—ë {len(orders) - 10} –∑–∞–∫–∞–∑–æ–≤"
        
        await update.message.reply_text(text, parse_mode='HTML', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"Error in myorders command: {e}")
        await update.message.reply_text(get_text('orders_load_error', lang))


# 3. In setup_handlers(), after line 724 (after CommandHandler("start", start)), add:
    application.add_handler(CommandHandler("myorders", myorders_command))
