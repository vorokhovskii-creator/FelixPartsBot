import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from config import (
    BOT_TOKEN,
    BACKEND_URL,
    CATEGORIES,
    CATEGORY,
    PARTS_SELECTION,
    VIN_INPUT,
    ORIGINAL_CHOICE,
    PHOTO_UPLOAD,
    CONFIRMATION
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def load_categories_from_api():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ backend API"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/categories", timeout=5)
        if response.status_code == 200:
            categories = response.json()
            result = {}
            for cat in categories:
                key = f"{cat['icon']} {cat['name_ru']}"
                result[key] = {'id': cat['id'], 'parts': []}
            return result
    except Exception as e:
        logger.warning(f"Failed to load categories from API: {e}")
    
    logger.info("Using fallback categories from config.py")
    result = {}
    for key in CATEGORIES.keys():
        result[key] = {'id': None, 'parts': []}
    return result


async def load_parts_from_api(category_id, category_name):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ API"""
    if category_id:
        try:
            response = requests.get(
                f"{BACKEND_URL}/api/parts",
                params={'category_id': category_id},
                timeout=5
            )
            if response.status_code == 200:
                parts = response.json()
                return [p['name_ru'] for p in parts if p['is_common']]
        except Exception as e:
            logger.warning(f"Failed to load parts from API: {e}")
    
    logger.info(f"Using fallback parts from config.py for {category_name}")
    return CATEGORIES.get(category_name, [])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data['mechanic_name'] = user.first_name
    context.user_data['telegram_id'] = str(user.id)
    
    keyboard = [
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Felix Parts Bot ‚Äî –ø–æ–º–æ–≥—É –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['selected_parts'] = []
    
    categories = await load_categories_from_api()
    context.user_data['categories'] = categories
    
    keyboard = [
        [InlineKeyboardButton(cat, callback_data=f'cat_{i}')] 
        for i, cat in enumerate(categories.keys())
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')])
    
    await query.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—á–∞—Å—Ç–µ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CATEGORY


async def select_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    categories = context.user_data.get('categories', {})
    cat_index = int(query.data.split('_')[1])
    category_name = list(categories.keys())[cat_index]
    
    context.user_data['category'] = category_name
    context.user_data['category_id'] = categories[category_name]['id']
    context.user_data['selected_parts'] = []
    
    parts = await load_parts_from_api(
        categories[category_name]['id'],
        category_name
    )
    context.user_data['available_parts'] = parts
    
    await show_parts_keyboard(query, context)
    return PARTS_SELECTION


async def show_parts_keyboard(query, context: ContextTypes.DEFAULT_TYPE):
    category = context.user_data['category']
    parts = context.user_data.get('available_parts', [])
    
    selected = context.user_data.get('selected_parts', [])
    keyboard = []
    
    for part in parts:
        check = "‚úÖ " if part in selected else ""
        keyboard.append([InlineKeyboardButton(
            f"{check}{part}", 
            callback_data=f'part_{part}'
        )])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data='manual')])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data='next_vin')])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')])
    
    await query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(selected)}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def toggle_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    part = query.data.replace('part_', '')
    selected = context.user_data.get('selected_parts', [])
    
    if part in selected:
        selected.remove(part)
    else:
        selected.append(part)
    
    context.user_data['selected_parts'] = selected
    
    await show_parts_keyboard(query, context)
    return PARTS_SELECTION


async def manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['waiting_manual_part'] = True
    
    await query.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –≤—Ä—É—á–Ω—É—é:"
    )
    return PARTS_SELECTION


async def add_manual_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('waiting_manual_part'):
        return PARTS_SELECTION
    
    manual_part = update.message.text.strip()
    
    if manual_part:
        selected = context.user_data.get('selected_parts', [])
        selected.append(manual_part)
        context.user_data['selected_parts'] = selected
        context.user_data['waiting_manual_part'] = False
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data='continue_selection')],
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data='next_vin')]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {manual_part}\n\n"
            f"–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ: {len(selected)}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return PARTS_SELECTION


async def continue_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await show_parts_keyboard(query, context)
    return PARTS_SELECTION


async def input_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected = context.user_data.get('selected_parts', [])
    
    if len(selected) == 0:
        await query.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å!"
        )
        await show_parts_keyboard(query, context)
        return PARTS_SELECTION
    
    await query.message.reply_text(
        "üöó –í–≤–µ–¥–∏ VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):"
    )
    return VIN_INPUT


async def process_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin = update.message.text.strip()
    
    if len(vin) < 4:
        await update.message.reply_text(
            "‚ùå VIN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏ –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞:"
        )
        return VIN_INPUT
    
    context.user_data['vin'] = vin
    
    keyboard = [
        [InlineKeyboardButton("‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª", callback_data='original_yes')],
        [InlineKeyboardButton("üîß –ù–µ –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data='original_no')]
    ]
    
    await update.message.reply_text(
        "–ö–∞–∫–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –Ω—É–∂–Ω—ã?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ORIGINAL_CHOICE


async def original_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    is_original = query.data == 'original_yes'
    context.user_data['is_original'] = is_original
    
    keyboard = [
        [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data='upload_photo')],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_photo')]
    ]
    
    await query.message.reply_text(
        "–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–µ—Ç–∞–ª–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PHOTO_UPLOAD


async def request_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–µ—Ç–∞–ª–∏:"
    )
    return PHOTO_UPLOAD


async def upload_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        context.user_data['photo_url'] = file.file_path
        
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!")
    
    await show_confirmation(update, context)
    return CONFIRMATION


async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['photo_url'] = None
    await show_confirmation(update, context)
    return CONFIRMATION


async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    
    summary = (
        f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑:</b>\n\n"
        f"üë§ –ú–µ—Ö–∞–Ω–∏–∫: {data['mechanic_name']}\n"
        f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üöó VIN: {data['vin']}\n"
        f"üîß –î–µ—Ç–∞–ª–∏:\n"
    )
    
    for part in data['selected_parts']:
        summary += f"  ‚Ä¢ {part}\n"
    
    summary += f"\n{'‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª' if data['is_original'] else 'üîß –ù–µ –æ—Ä–∏–≥–∏–Ω–∞–ª'}\n"
    if data.get('photo_url'):
        summary += "üì∏ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
    ]
    
    if update.callback_query:
        await update.callback_query.message.reply_text(
            summary,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            summary,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = context.user_data
    
    order_data = {
        "mechanic_name": data['mechanic_name'],
        "telegram_id": data['telegram_id'],
        "category": data['category'],
        "vin": data['vin'],
        "selected_parts": data['selected_parts'],
        "is_original": data['is_original'],
        "photo_url": data.get('photo_url')
    }
    
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/orders",
            json=order_data,
            timeout=10
        )
        
        if response.status_code == 201:
            order = response.json()
            await query.message.reply_text(
                f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order['id']} —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–û–∂–∏–¥–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')
                ]])
            )
        else:
            error_msg = response.json().get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await query.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {error_msg}"
            )
    except requests.exceptions.Timeout:
        await query.message.reply_text(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
    except requests.exceptions.ConnectionError:
        await query.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
        )
    except Exception as e:
        logger.error(f"Error creating order: {e}")
        await query.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
    
    context.user_data.clear()
    return ConversationHandler.END


async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    telegram_id = str(update.effective_user.id)
    
    try:
        response = requests.get(
            f"{BACKEND_URL}/api/orders",
            params={"telegram_id": telegram_id},
            timeout=10
        )
        
        if response.status_code == 200:
            orders = response.json()
            
            if not orders:
                await query.message.reply_text(
                    "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
                )
                return
            
            text = "üìã <b>–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            for order in orders:
                status_emoji = {
                    '–Ω–æ–≤—ã–π': 'üÜï',
                    '–≤ —Ä–∞–±–æ—Ç–µ': '‚è≥',
                    '–≥–æ—Ç–æ–≤': '‚úÖ',
                    '–≤—ã–¥–∞–Ω': 'üì¶'
                }
                
                text += (
                    f"{status_emoji.get(order['status'], '‚ùì')} "
                    f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order['id']}</b>\n"
                    f"VIN: {order['vin']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
                    f"–î–∞—Ç–∞: {order['created_at'][:10]}\n\n"
                )
            
            await query.message.reply_text(
                text,
                parse_mode='HTML'
            )
        else:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤."
            )
    except requests.exceptions.Timeout:
        await query.message.reply_text(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
        )
    except requests.exceptions.ConnectionError:
        await query.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É."
        )
    except Exception as e:
        logger.error(f"Error fetching orders: {e}")
        await query.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤."
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
        "Felix Parts Bot –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –°–¢–û.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏\n"
        "‚Ä¢ üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞:</b>\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—á–∞—Å—Ç–µ–π\n"
        "2Ô∏è‚É£ –û—Ç–º–µ—Ç—å –Ω—É–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3Ô∏è‚É£ –í–≤–µ–¥–∏ VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "4Ô∏è‚É£ –£–∫–∞–∂–∏ —Ç–∏–ø –∑–∞–ø—á–∞—Å—Ç–µ–π (–æ—Ä–∏–≥–∏–Ω–∞–ª/–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª)\n"
        "5Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "6Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await query.message.reply_text(
        help_text,
        parse_mode='HTML'
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data.clear()
    
    await query.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')
        ]])
    )
    return ConversationHandler.END


def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(select_category, pattern='^new_order$')],
        states={
            CATEGORY: [CallbackQueryHandler(select_parts, pattern='^cat_')],
            PARTS_SELECTION: [
                CallbackQueryHandler(toggle_part, pattern='^part_'),
                CallbackQueryHandler(input_vin, pattern='^next_vin$'),
                CallbackQueryHandler(manual_input, pattern='^manual$'),
                CallbackQueryHandler(continue_selection, pattern='^continue_selection$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_manual_part)
            ],
            VIN_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_vin)],
            ORIGINAL_CHOICE: [CallbackQueryHandler(original_choice, pattern='^original_')],
            PHOTO_UPLOAD: [
                MessageHandler(filters.PHOTO, upload_photo),
                CallbackQueryHandler(request_photo, pattern='^upload_photo$'),
                CallbackQueryHandler(skip_photo, pattern='^skip_photo$')
            ],
            CONFIRMATION: [CallbackQueryHandler(confirm_order, pattern='^confirm$')]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')]
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(my_orders, pattern='^my_orders$'))
    application.add_handler(CallbackQueryHandler(help_command, pattern='^help$'))
    
    logger.info("Bot started")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
